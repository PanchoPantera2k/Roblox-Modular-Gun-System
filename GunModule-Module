-- Place In ServerScriptService Parented Under Folder Named "ModuleScripts"
-- Initiate The GunModule Using OOP
local Gun = {}
Gun.__index = Gun
Gun.Guns = {}

-- Service Variables
local ServerStorage = game:GetService("ServerStorage")

-- Functions

-- Main Functions

-- Function To Add Gun To Retrieval List
function Gun:AddGun(Player: Player, Gun)
	if not Gun.Guns[Player] then
		Gun.Guns[Player] = {}
	end
	table.insert(Gun.Guns[Player], Gun)
end

-- Function To Get Gun From Given Model
function Gun:GetGunFromModel(Model: Model)
	for Player, Table in pairs(Gun.Guns) do
		for _, Gun in pairs(Table) do
			if Gun.CurrentModel == Model then
				return Gun, Player
			end
		end
	end
	return nil
end

-- Function To Get Guns From Given Player
function Gun:GetGunsFromPlayer(player)
	for Player, Table in pairs(Gun.Guns) do
		if Player == player then
			return Table
		end
	end
	return nil
end

-- Function To Remove Gun From Retrieval List
function Gun:RemoveGun(Player: Player, Instance)
	for Index, Gun in pairs(Gun.Guns[Player]) do
		if Gun == Instance then
			if Gun.CurrentModel then
				Gun.CurrentModel:Destroy()
			end
			table.remove(Gun.Guns[Player], Index)
			break
		end
	end

end

-- Function To Remove Gun From The Given Model
function Gun:RemoveGunFromModel(Model)
	local Gun, Player = Gun:GetGunFromModel(Model)
	Gun:RemoveGun(Player, Gun)
end

-- Function To Remove All Guns From A Player
function Gun:RemoveGunsFromPlayer(Player)
	local Guns = Gun:GetGunsFromPlayer(Player)
	if Guns then
		for _, Gun in pairs(Guns) do
			if Gun then
				Gun:Remove()
			end
		end
	end
end

-- Start Functions

-- Function To Initiate The Gun Object
function Gun.New(Data, Owner)
	local self = setmetatable({}, Gun)
	self.Name = Data.Name
	self.MaxAmmo = Data.MaxAmmo
	self.Ammo = Data.Ammo
	self.Damage = Data.Damage
	self.Range = Data.Range
	self.FireRate = Data.FireRate
	self.ReloadTime = Data.ReloadTime
	self.HeadShotMultiplier = Data.HeadShotMultiplier
	self.Spread = Data.Spread
	
	self.Model = Data.Model
	self.CurrentModel = nil
	
	self.Owner = Owner
	
	Gun:AddGun(Owner, self)
	
	return self
end

-- Function To Create A Current Model
function Gun:Parent(NewParent)
	if self.Model then
		if not self.CurrentModel then
			self.CurrentModel = self.Model:Clone()
			
			-- Set Attributes To Current Model
			self.CurrentModel:SetAttribute("MaxAmmo", self.MaxAmmo)
			self.CurrentModel:SetAttribute("ReloadTime", self.ReloadTime)
			self.CurrentModel:SetAttribute("StartingAmmo", self.Ammo)
			self.CurrentModel:SetAttribute("FireRate", self.FireRate)
			self.CurrentModel:SetAttribute("Damage", self.Damage)
			self.CurrentModel:SetAttribute("Range", self.Range)
			self.CurrentModel:SetAttribute("HeadShotMultiplier", self.HeadShotMultiplier)
			self.CurrentModel:SetAttribute("Spread", self.Spread)
		end
		
		self.CurrentModel.Parent = NewParent
	end
end

-- Main Functions

local function CreateBloodEffect(RaycastInstance, EffectName, Emmisions, Duration)
	local Part = Instance.new("Part")
	Part.CanCollide = false
	Part.Transparency = 1
	
	local Effect = ServerStorage:WaitForChild("BloodEffects"):WaitForChild(EffectName):Clone()
	Effect.Parent = Part
	Effect:Emit(Emmisions)
	
	Part.Position = RaycastInstance.Position
	
	local WeldConstraint = Instance.new("WeldConstraint")
	WeldConstraint.Part0 = Part
	WeldConstraint.Part1 = RaycastInstance
	WeldConstraint.Parent = Part
	
	game.Debris:AddItem(Part, Duration)
	
	Part.Parent = RaycastInstance
end

-- Function To Check If Hit Is Inside A Character
local function InCharater(hit)
	if hit.Parent and hit.Parent:FindFirstChild("Humanoid") then
		return true 
	else
		return false 
	end
end

-- Create And Fire A Bullet To The TargetPos
local function CreateBullet(OriginPosition, TargetPos, self)
	local Bullet = Instance.new("Part")
	Bullet.Name = "Bullet"
	Bullet.Size = Vector3.new(0.1, 0.1, 0.1)
	Bullet.Shape = Enum.PartType.Ball
	Bullet.Color = Color3.fromRGB(67, 67, 67)
	Bullet.Material = Enum.Material.Metal
	Bullet.CanCollide = false
	Bullet.Anchored = false
	Bullet.Position = OriginPosition
	Bullet.BottomSurface = Enum.SurfaceType.Smooth
	Bullet.TopSurface = Enum.SurfaceType.Smooth
	Bullet.Parent = workspace.Bullets

	local BodyVelocity = Instance.new("BodyVelocity")
	BodyVelocity.Velocity = (TargetPos - OriginPosition).Unit * 500
	BodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
	BodyVelocity.P = math.huge
	BodyVelocity.Parent = Bullet

	Bullet.Touched:Connect(function(hit)
		if not hit:IsDescendantOf(self.Owner.Character) then
			if (hit:IsA("BasePart") or hit:IsA("MeshPart")) and
				not (InCharater(hit)) then
				Bullet.Position = TargetPos
				BodyVelocity:Destroy()
			else
				Bullet:Destroy()
			end
		end
	end)

	game.Debris:AddItem(Bullet, 15)
end

-- Calculate Damage Using The Distance Between The Hit Object And Self
local function CalculateDamage(DefaultDamage, RaycastResult: RaycastResult, self)
	local Distance = RaycastResult.Distance
	local MaxRange = self.Range

	if Distance > MaxRange then
		return 0
	end

	local DistanceMultiplier = 1-(Distance/MaxRange)
	local Damage = DefaultDamage*DistanceMultiplier

	return Damage
end


-- Function To Reload The Gun
function Gun:Reload()
	local ReloadSound = self.CurrentModel.Sounds.Reloading:Clone()
	ReloadSound.Parent = self.CurrentModel.Sounds
	ReloadSound:Play()

	ReloadSound.Ended:Connect(function(soundId: string) 
		ReloadSound:Destroy()
	end)
	
	task.wait(self.ReloadTime)
	
	self.Ammo = self.MaxAmmo
end

-- Function To Shoot A Bullet Directed Towards The Target
function Gun:Shoot(MousePosition)
	if self.Ammo > 0 then
		self.Ammo -= 1

		local RaycastParameters = RaycastParams.new()
		RaycastParameters.FilterType = Enum.RaycastFilterType.Exclude
		RaycastParameters.FilterDescendantsInstances = {self.CurrentModel.Parent, workspace.Bullets}

		local Origin = self.CurrentModel.BulletOrigin.Position
		local Direction = (MousePosition - Origin).Unit

		local Yaw = (math.random() - 0.5) * self.Spread
		local Pitch = (math.random() - 0.5) * self.Spread
		local SpreadCFrame = CFrame.new(Origin, Origin + Direction) * CFrame.Angles(Pitch, Yaw, 0)
		local SpreadDirection = SpreadCFrame.LookVector * 1000

		local RaycastResult = workspace:Raycast(Origin, SpreadDirection, RaycastParameters)

		if RaycastResult then
			local RaycastInstance = RaycastResult.Instance
			local Humanoid = RaycastInstance.Parent:FindFirstChildOfClass("Humanoid") or RaycastInstance.Parent.Parent:FindFirstChildOfClass("Humanoid")

			CreateBullet(Origin, RaycastResult.Position, self)

			if Humanoid and self.Owner.Character:FindFirstChildOfClass("Humanoid") ~= Humanoid then
				if RaycastInstance.Name == "Head" then
					Humanoid:TakeDamage(CalculateDamage(self.Damage * self.HeadShotMultiplier, RaycastResult, self))
					CreateBloodEffect(RaycastInstance, "Effect2", 950, 20)
				else
					Humanoid:TakeDamage(CalculateDamage(self.Damage, RaycastResult, self))
					CreateBloodEffect(RaycastInstance, "Effect1", 280, 15)
				end
			end
		end

		local FireSound = self.CurrentModel.Sounds.Fire:Clone()
		FireSound.Parent = self.CurrentModel.Sounds
		FireSound:Play()

		FireSound.Ended:Once(function(soundId: string) 
			FireSound:Destroy()
		end)
	else
		self:Reload()
	end
end



-- End Functions

-- Function To Delete The Gun And Remove It From The Retrival System
function Gun:Remove()
	Gun:RemoveGunFromModel(self.CurrentModel)
	if self.CurrentModel then
		self.CurrentModel:Destroy()
	end
	for Key, _ in pairs(self) do
		self[Key] = nil
	end
end

return Gun
